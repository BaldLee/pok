--
--                               POK header
--
-- The following file is a part of the POK project. Any modification should
-- be made according to the POK licence. You CANNOT use this file or a part
-- of a file for your own project.
--
-- For more information on the POK licence, please see our LICENCE FILE
--
-- Please follow the coding guidelines described in doc/CODING_GUIDELINES
--
--                                      Copyright (c) 2007-2021 POK team

package test
public

with POK;
with ARINC653;

virtual bus security_layer
end security_layer;

virtual bus implementation security_layer.secret
properties
   POK::Security_Level => 2;
end security_layer.secret;

virtual bus implementation security_layer.topsecret
properties
   POK::Security_Level => 5;
end security_layer.topsecret;

virtual processor partition
properties
   ARINC653::HM_Error_ID_Actions => (
	   	[ErrorIdentifier => 5; Description => "Ignore"; Action => "Ignore";],
   		[ErrorIdentifier => 6; Description => "Warm restart partition"; Action => "Warm restart partition";],
    	[ErrorIdentifier => 7; Description => "Warm restart partition"; Action => "Warm_Restart";],
    	[ErrorIdentifier => 8; Description => "Warm restart partition"; Action => "Warm_Restart";],
    	[ErrorIdentifier => 9; Description => "Warm restart partition"; Action => "Warm_Restart";],    	
    	[ErrorIdentifier => 10; Description => "Warm restart partition"; Action => "Warm_Restart";]
      );
   POK::Additional_Features => (libc_stdio, console);
end partition;

virtual processor implementation partition.impl
end partition.impl;

processor ppc
end ppc;

processor implementation ppc.impl
subcomponents
   part1 : virtual processor partition.impl
      {POK::Criticality => 1;
       Provided_Virtual_Bus_Class => (classifier (test::security_layer.secret));};
   part2 : virtual processor partition.impl
      {POK::Criticality => 2;
       Provided_Virtual_Bus_Class => (classifier (test::security_layer.topsecret));};
properties
   POK::Architecture => x86;
   POK::BSP => x86_qemu;
   ARINC653::Module_Major_Frame => 1000ms;
   ARINC653::Module_Schedule => (
       	[Partition => reference(part1); Duration => 500ms; Periodic_Processing_Start => true;],
       	[Partition => reference(part2); Duration => 500ms; Periodic_Processing_Start => true;]
   );
   ARINC653::HM_Error_ID_Levels => (
		[ErrorIdentifier => 1; Description => "Module init error"; ErrorLevel => Module_Level; ErrorCode => Module_Init;],
		[ErrorIdentifier => 2; Description => "Module Scheduling error"; ErrorLevel => Module_Level; ErrorCode => Module_Scheduling;],
		[ErrorIdentifier => 3; Description => "Module config error"; ErrorLevel => Module_Level; ErrorCode => Module_Config;],
		[ErrorIdentifier => 4; Description => "Hardware error"; ErrorLevel => Module_Level; ErrorCode => Hardware_Fault;],
		[ErrorIdentifier => 5; Description => "Partition numeric error"; ErrorLevel => Partition_Level; ErrorCode => Numeric_Error;],
		[ErrorIdentifier => 6; Description => "Partition illegal request error"; ErrorLevel => Partition_Level; ErrorCode => Illegal_Request;],
		[ErrorIdentifier => 7; Description => "Partition init error"; ErrorLevel => Partition_Level; ErrorCode => Partition_Init;],
		[ErrorIdentifier => 8; Description => "Partition scheduling error"; ErrorLevel => Partition_Level; ErrorCode => Partition_Scheduling;],
		[ErrorIdentifier => 9; Description => "Partition handler error"; ErrorLevel => Partition_Level; ErrorCode => Partition_Handler;],
		[ErrorIdentifier => 10; Description => "Partition config error"; ErrorLevel => Partition_Level; ErrorCode => Partition_Config;],
		[ErrorIdentifier => 11; Description => "Process deadline miss"; ErrorLevel => Process_Level; ErrorCode => Deadline_Miss;],
		[ErrorIdentifier => 12; Description => "Process application error"; ErrorLevel => Process_Level; ErrorCode => Application_Error;],
		[ErrorIdentifier => 13; Description => "Process numeric error"; ErrorLevel => Process_Level; ErrorCode => Numeric_Error;],
		[ErrorIdentifier => 14; Description => "Process illegal request"; ErrorLevel => Process_Level; ErrorCode => Illegal_Request;],
		[ErrorIdentifier => 15; Description => "Process power fail"; ErrorLevel => Process_Level; ErrorCode => Power_Fail;],
		[ErrorIdentifier => 16; Description => "Process memory violation"; ErrorLevel => Process_Level; ErrorCode => Memory_Violation;],
		[ErrorIdentifier => 17; Description => "Process stack overflow"; ErrorLevel => Process_Level; ErrorCode => Stack_Overflow;]		
	);
	ARINC653::HM_Error_ID_Actions => (
    	[ErrorIdentifier => 1; Description => "Reset module"; Action => "Reset";],
    	[ErrorIdentifier => 2; Description => "Reset module"; Action => "Reset";],
    	[ErrorIdentifier => 3; Description => "Reset module"; Action => "Reset";]
      );
end ppc.impl;

process myprocess
end myprocess;

process implementation myprocess.impl1
subcomponents
   thr1 : thread mythread.impl1;
end myprocess.impl1;

process implementation myprocess.impl2
subcomponents
   thr2 : thread mythread.impl2;
end myprocess.impl2;

thread threads_hm_definition
properties
   ARINC653::HM_Error_ID_Actions => (
    	[ErrorIdentifier => 11; Description => "Ignore"; Action => "Ignore";],
    	[ErrorIdentifier => 12; Description => "Ignore"; Action => "Ignore";],
    	[ErrorIdentifier => 13; Description => "Ignore"; Action => "Ignore";],
    	[ErrorIdentifier => 14; Description => "Ignore"; Action => "Ignore";],
    	[ErrorIdentifier => 15; Description => "Ignore"; Action => "Ignore";],
    	[ErrorIdentifier => 16; Description => "Ignore"; Action => "Ignore";],
    	[ErrorIdentifier => 4; Description => "Ignore"; Action => "Ignore";],
    	[ErrorIdentifier => 18; Description => "Ignore"; Action => "Ignore";]
      );
end threads_hm_definition;

thread mythread extends threads_hm_definition
properties
   Stack_Size => 30 Kbyte;
end mythread;

thread implementation mythread.impl1
calls 
   call1 : { pspg : subprogram hello_part1;};
properties
   Priority => 1;
   Initialize_Entrypoint => classifier (test::thread_starting);
   dispatch_protocol => periodic;
   period            => 1000ms;
   deadline          => 500ms;
   compute_execution_time => 0ms .. 1ms;
   Code_Size  => 4 Kbyte;
   Stack_Size => 4 Kbyte;
   Data_Size  => 4 Kbyte;
end mythread.impl1;

thread implementation mythread.impl2
calls 
   call1 : { pspg : subprogram hello_part2;};
properties
   Priority => 1;
   compute_execution_time => 0ms .. 1ms;
   dispatch_Protocol => periodic;
   period            => 1000ms;
   deadline          => 600ms;
   Code_Size  => 4 Kbyte;
   Stack_Size => 4 Kbyte;
   Data_Size  => 4 Kbyte;
end mythread.impl2;

subprogram thread_starting
properties
   source_name => "user_thread_starting";
   source_language => (C);
   Source_Text => ("threadstart.c",  "threadstart.h");
   Code_Size  => 2 Kbyte;
   Data_Size  => 2 Kbyte;
end thread_starting;

subprogram hello_part1
properties
   source_name => "user_hello_part1";
   source_language => (C);
   Source_Text => ("hello1.c");
   Code_Size  => 2 Kbyte;
   Data_Size  => 2 Kbyte;
end hello_part1;

subprogram hello_part2
properties
   Source_Text => ("hello2.c");
   source_language => (C);
   source_name => "user_hello_part2";
   Code_Size  => 2 Kbyte;
   Data_Size  => 2 Kbyte;
end hello_part2;


memory partitionmemory
properties
   Memory_Size => 800000 Bytes;
end partitionmemory;

memory mainmemory
end mainmemory;

memory implementation mainmemory.impl
subcomponents
   part1: memory partitionmemory ;
   part2: memory partitionmemory ;
end mainmemory.impl;


bus separation_bus
end separation_bus;

bus implementation separation_bus.i
subcomponents
   layer_topsecret      : virtual bus security_layer.secret;
   layer_secret         : virtual bus security_layer.topsecret;
end separation_bus.i;



system node
end node;

system implementation node.impl
subcomponents
   cpu   : processor ppc.impl;
   part1 : process myprocess.impl1;
   part2 : process myprocess.impl2;
   mem : memory mainmemory.impl;
   rtbus : bus separation_bus.i;
properties
   Actual_Processor_Binding => (reference (cpu.part1)) applies to part1;
   Actual_Processor_Binding => (reference (cpu.part2)) applies to part2;
   actual_memory_binding =>
      (reference (mem.part1)) applies to part1;
   actual_memory_binding =>
      (reference (mem.part2)) applies to part2;
end node.impl;
end test;
